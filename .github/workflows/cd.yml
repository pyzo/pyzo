# GH Actions script to build the Pyzo binaries.

name: CD

on:
  workflow_dispatch:
  push:
    tags: [ 'v*' ]
    branches: [ cd, bump, freeze ]

jobs:

  # The default Windows build serving the majority of users.
  # Not needed because already installed: choco install innosetup --version=5.6.1
  win64:
    name: Build Windows 64
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U pyside6 pyinstaller
          pip install -r freeze/frozen_libs.txt
    - name: Freeze
      run: python freeze/pyzo_freeze.py
    - name: Package
      run: python freeze/pyzo_package.py
    - name: Test frozen
      run: |
        python freeze/pyzo_test_frozen.py
        python tests/check_log.py
    - name: Upload distributions
      uses: actions/upload-artifact@v3
      with:
        path: |
          freeze/dist/*.zip
          freeze/dist/*.exe
          freeze/dist/*.msi
        name: dist

  # A 32bit windows build for people on old machines.
  # Win32 is on the brink of deprecation, so we tune down on Py and Qt versions.
  win32:
    name: Build Windows 32
    runs-on: windows-latest
    env:
        PYZO_QT_API: PyQt5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        architecture: x86
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U ${{ env.PYZO_QT_API }} pyinstaller
          pip install -r freeze/frozen_libs.txt
    - name: Freeze
      run: python freeze/pyzo_freeze.py
    - name: Package
      run: python freeze/pyzo_package.py
    - name: Test frozen
      run: |
        python freeze/pyzo_test_frozen.py
        python tests/check_log.py
    - name: Upload distributions
      uses: actions/upload-artifact@v3
      with:
        path: |
          freeze/dist/*.zip
        name: dist

  # A MacOS build for x86_64. Via Rosetta this should work on all modern Macs,
  # but an arm64 (M1) build would be nice in the future.
  macos_amd64:
    name: Build MacOS amd64
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U pyside6 pyinstaller
          pip install -r freeze/frozen_libs.txt
    - name: Freeze
      run: python freeze/pyzo_freeze.py
    - name: Codesign app bundle
      env:
        MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
        MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
        MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      run: |
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
        security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        # We finally codesign our app bundle, specifying the Hardened runtime option
        /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --all-architectures --timestamp --deep --options runtime freeze/dist/pyzo.app -v
    - name: "Notarize app bundle"
      env:
        PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
        PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
        PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
      run: |
        echo "Create keychain profile"
        xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"
        echo "Creating temp notarization archive"
        ditto -c -k --keepParent "freeze/dist/pyzo.app" "notarization.zip"
        echo "Notarize app"
        xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait
        # Debug
        # xcrun notarytool log c44df8eb-3087-4a3c-a5f4-9b72caceb083 --keychain-profile "notarytool-profile"
        # Finally, we need to "attach the staple" allow our app to be validated without internet connection.
        echo "Attach staple"
        xcrun stapler staple "freeze/dist/pyzo.app"
    - name: Package
      run: python freeze/pyzo_package.py
    - name: Test frozen
      shell: bash
      run: |
        python freeze/pyzo_test_frozen.py
        python tests/check_log.py
    - name: Upload distributions
      uses: actions/upload-artifact@v3
      with:
        path: |
          freeze/dist/*.zip
          freeze/dist/*.dmg
        name: dist

  # For Linux we make a build on a somewhat older ubuntu. Most Linux users prefer (or are fine with)
  # running Pyzo from source anyway.
  linux_amd64:
    name: Build Linux amd64
    runs-on: ubuntu-20.04
    env:
      PYZO_QT_API: PyQt5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U ${{ env.PYZO_QT_API }} pyinstaller
          pip install -r freeze/frozen_libs.txt
          sudo apt install -y libdbus-1-3 libxkbcommon-x11-0 libxcb-icccm4 \
            libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xfixes0 libxcb-shape0 libxcb-cursor0
    - name: Freeze
      run: python freeze/pyzo_freeze.py
    - name: Package
      run: python freeze/pyzo_package.py
    - name: Test frozen
      run: |
        xvfb-run --auto-servernum python freeze/pyzo_test_frozen.py
        python tests/check_log.py
    - name: Upload distributions
      uses: actions/upload-artifact@v3
      with:
        path: |
          freeze/dist/*.tar.gz
        name: dist


  publish:
    name: Publish binaries to Github
    runs-on: ubuntu-latest
    needs: [ win64, win32, macos_amd64, linux_amd64 ]
    if: success() && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Download assets
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    - name: Get version from git ref
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Create GH release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
            Autogenerated binaries.
            See [the release notes](https://github.com/pyzo/pyzo/blob/main/RELEASE_NOTES.md) for details.
        draft: false
        prerelease: false
    - name: Upload release assets
      # Move back to official action after fix https://github.com/actions/upload-release-asset/issues/4
      uses: AButler/upload-release-assets@v2.0
      with:
        release-tag: ${{ steps.get_version.outputs.VERSION }}
        files: 'dist/*.zip;dist/*.tar.gz;dist/*.dmg;dist/*.exe;dist/*.msi'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
