# GH Actions script to build the Pyzo binaries.

name: CD

on:
  workflow_dispatch:
  push:
    tags: [ 'v*' ]
    branches: [ cd ]

jobs:

  # The default Windows build serving the majority of users.
  # Not needed because already installed: choco install innosetup --version=5.6.1
  win64:
    name: Build Windows 64
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U pyside6 pyinstaller
          pip install -r freeze/frozen_libs.txt
    - name: Freeze
      run: python freeze/pyzo_freeze.py
    - name: Package
      run: python freeze/pyzo_package.py
    - name: Test frozen
      run: python freeze/pyzo_test_frozen.py
    - name: Upload distributions
      uses: actions/upload-artifact@v2
      with:
        path: |
          freeze/dist/*.zip
          freeze/dist/*.exe
        name: dist

  # A 32bit windows build for people on old machines.
  # Win32 is on the brink of deprecation, so we tune down on Py and Qt versions.
  win32:
    name: Build Windows 32
    runs-on: windows-latest
    env:
        PYZO_QT_API: PyQt5
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: x86
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U ${{ env.PYZO_QT_API }} pyinstaller
          pip install -r freeze/frozen_libs.txt
    - name: Freeze
      run: python freeze/pyzo_freeze.py
    - name: Package
      run: python freeze/pyzo_package.py
    - name: Test frozen
      run: python freeze/pyzo_test_frozen.py
    - name: Upload distributions
      uses: actions/upload-artifact@v2
      with:
        path: |
          freeze/dist/*.zip
        name: dist

  # A MacOS build for x86_64. Via Rosetta this should work on all modern Macs,
  # but an arm64 (M1) build would be nice in the future.
  macos_amd64:
    name: Build MacOS amd64
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U pyside6 pyinstaller
          pip install -r freeze/frozen_libs.txt
    - name: Freeze
      run: python freeze/pyzo_freeze.py
    - name: Package
      run: python freeze/pyzo_package.py
    - name: Test frozen
      shell: bash
      run: python freeze/pyzo_test_frozen.py
    - name: Upload distributions
      uses: actions/upload-artifact@v2
      with:
        path: |
          freeze/dist/*.zip
          freeze/dist/*.dmg
        name: dist

  # For Linux we make a build on a somewhat older ubuntu. Most Linux users prefer (or are fine with)
  # running Pyzo from source anyway.
  linux_amd64:
    name: Build Linux amd64
    runs-on: ubuntu-18.04
    env:
      PYZO_QT_API: PyQt5
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U ${{ env.PYZO_QT_API }} pyinstaller
          pip install -r freeze/frozen_libs.txt
          sudo apt install -y libdbus-1-3 libxkbcommon-x11-0 libxcb-icccm4 \
            libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xfixes0 libxcb-shape0
    - name: Freeze
      run: python freeze/pyzo_freeze.py
    - name: Package
      run: python freeze/pyzo_package.py
    - name: Test frozen
      run: xvfb-run --auto-servernum python freeze/pyzo_test_frozen.py
    - name: Upload distributions
      uses: actions/upload-artifact@v2
      with:
        path: |
          freeze/dist/*.tar.gz
        name: dist


  publish:
    name: Publish binaries to Github
    runs-on: ubuntu-latest
    needs: [ win64, win32, macos_amd64, linux_amd64 ]
    if: success() && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Download assets
      uses: actions/download-artifact@v1.0.0
      with:
        name: dist
    - name: Get version from git ref
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Create GH release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
            Autogenerated binary wheels that include wgpu-native.
            See [the changelog](https://github.com/pygfx/wgpu-py/blob/main/CHANGELOG.md) for details.
        draft: false
        prerelease: false
    - name: Upload release assets
      # Move back to official action after fix https://github.com/actions/upload-release-asset/issues/4
      uses: AButler/upload-release-assets@v2.0
      with:
        release-tag: ${{ steps.get_version.outputs.VERSION }}
        files: 'dist/*.zip;dist/*.tar.gz;dist/*.dmg;dist/*.exe;dist/*.msi'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
